<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2024/12/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/12/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>最近期末考，开始复习数据结构，后期等有时间在系统学习吧</p><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表基本定义</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">typedef struct <span class="hljs-keyword">node</span><br><span class="hljs-title">&#123;</span><br><span class="hljs-title">Element</span> element;<br>struct <span class="hljs-keyword">node</span> <span class="hljs-title">*link</span>;<br>&#125;<span class="hljs-keyword">Node</span><span class="hljs-title">;</span><br></code></pre></td></tr></table></figure><p>其中，为了实现链表的连续性，需要每一个结点的指针域指向下一个结点，而下一个节点是node型，所以就需要<strong>同为node类型的指针</strong>(指针的类型决定了该指针指向的地址中可以存放哪些元素)</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h2><h3 id="稀疏矩阵的快速转置"><a href="#稀疏矩阵的快速转置" class="headerlink" title="稀疏矩阵的快速转置"></a>稀疏矩阵的快速转置</h3><p>基本思路是用空间换时间，即引入额外的数组来记录矩阵中的一些信息<br>num数组用于存放每列的非零元素数，k数组用于实现转置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//初始化num数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>&#123;<br><span class="hljs-built_in">num</span>[j]=<span class="hljs-number">0</span>;     <br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)<br>&#123;<br><span class="hljs-comment">//A为稀疏矩阵，table为三元组表，因为三元组表本质上是一个长数组，每个单元存放一个三元组</span><br><span class="hljs-comment">//所以table[i]的位置即为三元组表中第i个三元组</span><br><span class="hljs-comment">//table[i].col代表该三元组里存放列下标为col的元素，使其加一</span><br><span class="hljs-comment">//因为num数组有n个元素，与稀疏矩阵的列数相同，且一一对应，就完成了统计列元素数的操作</span><br><span class="hljs-built_in">num</span>[A.table[i].col]++;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于num数组，我们可以想象成标在矩阵列下标上的一组数据，数组下标与矩阵列下标一一对应，存放着该列的非零元素数，上述加一操作是在下标为col的位置加一，现实意义是该元素位于矩阵的col处，加一操作让对应col下标的num数组单元里存放的数据加一</p><p><img src="/.io//blog/blog/picture/image-20241231160607294.png" alt="image-20241231160607294"></p><p>k数组比较复杂，k[j]存放着从0到j-1列的所有非零元素个数和，转置矩阵B是按照顺序存储的，对应的A中元素所在列的前几列有几个元素，转置后B中元素的前几行就会有几个元素，所以该元素在表中的位置就是k[j]的值（<strong>若该元素所在列有多个元素，k[j]等于第一个元素的位置，访问后就要进行自加操作，将位置后移，以存放该列第二个非零元素</strong>&#x3D;&#x3D;<strong>因为对于A中同一列的两个元素，k[j]相等，所以加一代表位置后移</strong>&#x3D;&#x3D;）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)<br>&#123;<br>//A中i行元素所在列数，转置后为B中该元素的行数，k数组就可存储A中该元素所在列前几列的元素<br>//总和，即为转置后B中该元素所在行前几行的元素总和，就是该元素在行优先存储的三元组表的位置  //下标<br><span class="hljs-type">int</span> <span class="hljs-keyword">index</span>=k[A.<span class="hljs-keyword">table</span>[i].col]++;<br>//常见的交换操作<br>B.<span class="hljs-keyword">table</span>[<span class="hljs-keyword">index</span>].col=A.<span class="hljs-keyword">table</span>[i].<span class="hljs-keyword">row</span>;<br>B.<span class="hljs-keyword">table</span>[<span class="hljs-keyword">index</span>].<span class="hljs-keyword">row</span>=A.<span class="hljs-keyword">table</span>[i].col;<br>B.<span class="hljs-keyword">table</span>[<span class="hljs-keyword">index</span>].<span class="hljs-keyword">value</span>=A.<span class="hljs-keyword">table</span>[i].<span class="hljs-keyword">value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="关于新增二叉树时一定要用Binarytree结构体，而不是直接BTnode一个新的结点"><a href="#关于新增二叉树时一定要用Binarytree结构体，而不是直接BTnode一个新的结点" class="headerlink" title="关于新增二叉树时一定要用Binarytree结构体，而不是直接BTnode一个新的结点"></a>关于新增二叉树时一定要用Binarytree结构体，而不是直接BTnode一个新的结点</h3><p>因为树是递归结构，对于复杂的树来说，可能会涉及到合并，新增加结点等等操作，使用Binarytree可以更方便得管理树，因为它通过管理有指向的根结点来管理整棵树，这在树的合并时起到巨大的作用。</p><p>而BTnode只能管理单一结点，在简单的程序中区别不大，但是程序操作越复杂BTnode的局限性越大。</p><p>所以为了方便管理，外加增加代码可复用性，在简单的程序中也要使用Binarytree</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><h3 id="关于哈夫曼算法为什么是最小加权树"><a href="#关于哈夫曼算法为什么是最小加权树" class="headerlink" title="关于哈夫曼算法为什么是最小加权树"></a>关于哈夫曼算法为什么是最小加权树</h3><p>哈夫曼算法的核心在于<strong>越大的权应该离根节点越近</strong>，基于此，哈夫曼算法主要分为以下几个步骤</p><ol><li>将给定权值集合中的每个数据都作为一棵树的根结点</li><li>将最小的两个结点合并，权相加的和作为新的根结点，习惯上通常将较小的结点作为左子树</li><li>知道仅有一个根结点，即权值集合都已转为一棵二叉树的叶结点，否则重复第二条</li></ol><p>而为什么这样就可以做到让加权路径长度最小呢？</p><p>我们先把全职集合转化的二叉树叫做最终二叉树，便于下面叙述</p><p>首先，该算法将最小的两个结点结合，这就保证了离最终二叉树根结点最远的叶结点的权值最小，根据加权路径长度等于权值乘路径可知，这样使路径最长的结点的权最小，故乘积最小，同理，因为选最小的结点相加，权值较大的结点的层级就越高，就越靠近根结点，使得权值越大，路径就短</p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图的邻接表"><a href="#图的邻接表" class="headerlink" title="图的邻接表"></a>图的邻接表</h2><p>边的插入运算核心思想为，想插入边&lt;u,v&gt;建立一个新结点，将其插入进u的单链表的最前面</p><p>这样较之插入单链表末尾，可以省去遍历单链表，找到末尾节点的步骤，降低时间复杂度</p><p>插入运算核心代码为</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">Status Insert(LGraph* lg, int u, int v)<br>&#123;<br>    ENode* p;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (u &lt; 0 || v &lt; 0 || u &gt;= lg-&gt;</span><span class="hljs-function"><span class="hljs-title">n</span> || v &gt;= lg-&gt;</span>n)<br>    &#123;<br>        return ERROR;  <span class="hljs-comment">// 输入的顶点编号无效</span><br>    &#125;<br>    p = (ENode*)malloc(sizeof(ENode));<br>    <span class="hljs-keyword">if</span> (!p)<br>    &#123;<br>        return Overflow;  <span class="hljs-comment">// 内存分配失败</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>adjVex = v;<br>    <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">nextArc</span> = lg-&gt;</span><span class="hljs-function"><span class="hljs-title">a</span>[u];  // lg-&gt;</span><span class="hljs-function"><span class="hljs-title">a</span>[u]意为，lg-&gt;</span>a指向的数组中a[u]位置存放的地址，即为单链表<br>                               头结点的地址，<span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>nextArc经此操作，也成为存放头结点地址的指针变量<br>    <span class="hljs-function"><span class="hljs-title">lg</span>-&gt;</span>a[u] = p;  <span class="hljs-comment">// 将a[u]存放的地址更改为p的地址，是的头结点变为p</span><br>    <span class="hljs-function"><span class="hljs-title">lg</span>-&gt;</span>e++;  <span class="hljs-comment">// 增加边数</span><br>    return OK;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xl">void DFS(LGraph *lg, int v, int *visited) <br>&#123;<br>    ENode *p;<br>    printf(<span class="hljs-string">&quot;%d &quot;</span>, v);  <span class="hljs-comment">// 访问当前顶点</span><br>    visited[v] = <span class="hljs-number">1</span>;     <span class="hljs-comment">// 标记顶点 v 已访问</span><br>    <br>    <span class="hljs-function"><span class="hljs-title">p</span> = lg-&gt;</span>a[v];  <span class="hljs-comment">// 获取顶点 v 的邻接链表</span><br>    <span class="hljs-keyword">while</span> (p) <br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (!visited[p-&gt;</span>adjVex]) <br>        &#123;  <span class="hljs-comment">// 如果邻接点 p-&gt;adjVex 没有被访问</span><br>            DFS(<span class="hljs-function"><span class="hljs-title">lg</span>, p-&gt;</span>adjVex, visited);  <span class="hljs-comment">// 递归访问邻接点</span><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p-&gt;</span>nextArc;  <span class="hljs-comment">// 移动到下一个邻接点</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 外部接口函数：遍历图的所有顶点</span><br>void DFSgraph(LGraph *lg) &#123;<br>    int visited[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// 访问标志数组，初始化为 0</span><br>    <br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; lg-&gt;</span>n; i++) <br>    &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i])<br>        &#123;  <span class="hljs-comment">// 如果顶点 i 没有被访问</span><br>            DFS(lg, i, visited);  <span class="hljs-comment">// 从顶点 i 开始深度优先遍历</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传递 <code>lg</code> 而不是 <code>&amp;lg</code> 的原因在于 <code>lg</code> 已经是一个指向 <code>LGraph</code> 结构体的指针（即 <code>LGraph *lg</code>）。具体来说，<code>lg</code> 是 <code>DFS</code> 函数的参数，它指向一个图的结构体，而在递归调用时，我们并不需要修改 <code>lg</code> 的指向（即不需要修改 <code>LGraph *lg</code> 变量本身的地址），所以直接传递 <code>lg</code> 就可以了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/jelly12345/p/15726833.html">https://www.cnblogs.com/jelly12345/p/15726833.html</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs-学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络学习</title>
    <link href="/2024/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>做项目涉及到好多计网的知识，但是系统学习的话实在是太浪费时间了</p><p>只能边做边学，不定期更新各种计网学习知识。。。。（学习过于碎片化导致没有办法很系统的记笔记。。sorry啦~)</p><p>先贴上学习链接</p><p><a href="https://github.com/SSHeRun/CS-Xmind-Note.git">https://github.com/SSHeRun/CS-Xmind-Note.git</a></p><p>然后会慢慢放上自己的理解，有时间再整理笔记</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1#">https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1#</a></p><p><strong>路由</strong>（<strong>routing</strong>）是任何网络中选取路径的程序，在此”程序”是指一组在电脑中执行的程序。电脑网络由称为节点的许多机器(例如电脑)以及连线至这些节点的路径或链接所组成。网络中相互连接的两个节点之间的通信可以透过许多不同的路径进行。路由是使用一些预定规则选取最佳路径的程序。</p><p>简单来说，可以把路由想象成一个动词，是节点之间通信选择的过程</p><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p><a href="https://topvpntool.github.io/hide-ip/#%E9%BB%91%E5%AE%A2%E6%98%AF%E6%80%8E%E6%A0%B7%E9%9A%90%E8%97%8F%E4%BB%96%E4%BB%AC%E7%9A%84-ip-%E5%9C%B0%E5%9D%80">https://topvpntool.github.io/hide-ip/#%E9%BB%91%E5%AE%A2%E6%98%AF%E6%80%8E%E6%A0%B7%E9%9A%90%E8%97%8F%E4%BB%96%E4%BB%AC%E7%9A%84-ip-%E5%9C%B0%E5%9D%80</a></p><p>因为过于菜，所以每次更新都是上网上看大佬的链接然后把他们搬过来学习。。。</p><h2 id="关于代理的一些事"><a href="#关于代理的一些事" class="headerlink" title="关于代理的一些事"></a>关于代理的一些事</h2><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>中转服务器，介于用户端与数据服务器之间，提高用户查找数据的效率。。。</p><p>网络上有很多平台，比如知乎，b站，当你在这些平台上访问数据时，实际在互联网中会经过如下操作</p><ul><li>用户端向平台存储服务器发送获取请求</li><li>请求通过网络中的路由器，一步一步到达目标服务器</li><li>服务器接受请求之后同样得路发送你想获取数据</li></ul><p>这就存在一个问题，如果你距离服务器得距离过于远，请求需要经过得路由器就会越多，换句话说，他在网络中走过的距离就会越长，延迟就会越高</p><p>所以，cdn起到了驿站的作用，请求时，会先向cdn发送请求，如果有需要的数据就会直接发回，如果没有就会向上一级服务器请求，由此大大减小了所需时间</p><p><img src="/.io//blog/blog/picture/148231357a1c098c61ae3cadd43c96e3.jpeg" alt="img"></p><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><p>将连接到代理服务器的用户端打包，与公网隔绝，用户端任何与公网的交互都有代理服务器进行，不需要用户端自身连入公网。</p><p>由于其不需要用户端连入公网，所以经常用来翻墙(小朋友不要学习)，其原理与上述内容一致。</p><ul><li>用户端向距离较远的服务器**(防止被谈话得说法，大家懂得都懂。。。。)**发送请求时，请求会被墙拦截，墙本质上也是一个大型服务器，你向境外服务器请求时，会先经过墙</li><li>当你连入代理服务器时，你的请求不会经过墙，而是你自己配置的代理服务器，所以可以访问</li></ul><p><img src="/.io//blog/blog/picture/e5ff2d88cfc341e0693d2294b6532c81.jpeg" alt="在这里插入图片描述"></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>与代理服务器不只是名字相似，其原理同样相似。如果说代理服务器是用户端的代理，那反向代理就是服务器的代理，因原理与上述一直，就不过多叙述了</p><p><img src="/.io//blog/blog/picture/b94b6cda68742af5a087e7ea5d83ba49.jpeg" alt="在这里插入图片描述"></p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>大型电话本，用于根据域名查询ip地址</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs-学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moectf-wp</title>
    <link href="/2024/11/06/moectf-wp/"/>
    <url>/2024/11/06/moectf-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="moectf"><a href="#moectf" class="headerlink" title="moectf"></a>moectf</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="垫刀之路03"><a href="#垫刀之路03" class="headerlink" title="垫刀之路03"></a>垫刀之路03</h3><p>其实相当简单，只需要本地写一个php一句话木马之后，修改文件名为.jpg。上传后用burpsuit拦截即可。</p><p>但是由于不可抗力，我的bp一直没办法抓到post的包，所以暂时没有做出来</p><h3 id="垫刀之路04"><a href="#垫刀之路04" class="headerlink" title="垫刀之路04"></a>垫刀之路04</h3><p>说实话这题蛮莫名其妙的，直接就是一个目录穿越，访问..&#x2F;..&#x2F;..&#x2F;..&#x2F;就行了。以下是原出题人的意思</p><p>打开网页之后发现url里有 <code>?urc=</code> 再加上readme里写了本文档没有作用，所以猜测是目录穿越。。。emmm就。。。蛮莫名其妙的</p><h3 id="垫刀之路05"><a href="#垫刀之路05" class="headerlink" title="垫刀之路05"></a>垫刀之路05</h3><p>这题更是重量级，随便一个万能密码绕过就ok了</p><p><code>111 or 1=1 #</code></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web-wp</title>
    <link href="/2024/11/04/wp/"/>
    <url>/2024/11/04/wp/</url>
    
    <content type="html"><![CDATA[<h2 id="做题狗"><a href="#做题狗" class="headerlink" title="做题狗"></a>做题狗</h2><p>正在学习web漏洞，感觉以后还是web层面的漏洞更多一些</p><p>学习链接：<a href="https://github.com/hongriSec/Web-Security-Attack.git">https://github.com/hongriSec/Web-Security-Attack.git</a></p><p>以后不定期更新各种web题的wp(希望日更一道web,一道re)。。。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
